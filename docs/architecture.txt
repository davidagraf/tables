OVERVIEW
========
The tables app is an application to save charts of data and put relations in between the charts. Is is 100% generic.
The schema of the saved data can be configured randomly.

Software Parts:
---------------
Database (MYSQL) <-- SQL --> Application Server (PHP) <-- RESTfull (JSON) --> Client (Javascript/jQuery)

CONFIGURATION
=============
- Database: Configuration is done hardcoded. Tables need to be created/deleted/extended by hand.
            --> tables/application/utils/db/mysql_connect.php
- Application Server / Client: Both parts load the conigration from the file '/public/data/resources.json'. It contains the 
  description of the charts (chart columns, naming, datatypes, etc) and the relations between each other.
  
  Example:
  {
    "computer" : {                 <--- Descripes the schema of a chart. Key is the unique identifier of the chart type ('computer').
      "name" : "computer",         <--- Name of the chart. Redundant to the key but needed because of performance reasons.
      "title" : "Computers",       <--- Printed title of the chart.
      "fields" : {                 <--- Fields of the chart.
        "asset_tag" : {            <--- Schema of one chart column. Key is identifier of the column ('asset_tag').
          "title" : "Asset Tag"    <--- Printed column title.
        },
        "comments" : {
          "title" : "Type",
          "type"  : "textarea"     <--- Datatype. Default is text.
        }
      } ,
      "relations" : {              <--- Defines the charts to which this chart can be related to.
        "software" : {             <--- One relation. Identified by the key ('software').
          "title" : "Software"     <--- Printed column title.
        }
      }
    },
    "software" : {
      "name" : "software",
      "title" : "Software",
      "fields" : {
        "name" : {
          "title" : "Name"
        },
        "version" : {
          "title" : "Version",
          "type" : "version"
        }
      },
      "relations" : {
        "computer" : {
          "title" : "Computers"
        }
      }
    }
  }
  

IMPORTANT: Database and resources.json needs to be in sync!
In order to generate the DB creation SQL script, use sqlgenerator.php (see howto_generate_db_sql.txt). 

DATA BASE
=========
The database has two kind of tables
- chart tables: Save a chart 1-to-1 (column of a chart is mapped to a column in the database). Table names need to be similar
                to the chart identifier, and table columns to the column identifier of the coniguration file. Additionally,
                an id is saved for each column.
                
                Examples:
                -------------------------------------              ------------------------------
                | computer                          |              | software                   |
                ------------------------------------|              -----------------------------|
                | id | asset_tags | comments        |              | id | name       | version  |
                |===================================|              |============================|
                | 1  | some tag   | blabla          |              | 2  | Windows    | 7.0      |
                -------------------------------------              ------------------------------
                
- relation tables: Save the relation between tables. Per convention, the name for a relation table between chart
                   'computer' and 'software' has the name 'computer_software'. The ordering of the parts before and 
                   after the underscore is defined by string comparison: 'computer' < 'software'.
                   The table contain two columns with the names equal to the referenced charts to safe the referenced row ids
                   of the corresponding charts.
                   
                   Example:
                   ------------------------------
                   | computer_software          |
                   -----------------------------|
                   | id | computer   | software |
                   |============================|
                   | 2  | 1          | 2        |
                   ------------------------------



Application Server
==================
The application provides a REST interface for the client (see http://en.wikipedia.org/wiki/Representational_State_Transfer).
To enable the implementation of a RESTfull interface, the help of Apache's /.htacces file is needed. It redirects each request
that doesn't target a static file (like /public/index.html) to the php file /application/dispatcher.php. The dispatcher parses
the request URI, and executes the correct SQL statements and generates the correct response with the lop of the handler
(/application/handler.php).

The following REST API is provided:
GET <host>/resource
   gets all entries of the given resource (e.g. computer)
GET <host>/resource/ID
   gets the entry of the given resource with this ID
GET <host>/resource/field=='test'
   gets the entries of the given resource with field value 'test'
GET <host>/resource/field!='test'
   gets the entries of the given resource with with field value other than 'test'
GET <host>/resource/ID/resource2
   gets the entries of resource2 connected with resource with given ID (see relations)
POST <host>/resource {jsonrowdata}
   adds a new entry for the given resource  (url with ID is sent back in response)
POST <host>/resource/ID {jsonrowdata}
   updates the entry with ID for the given resource
DELETE <host>/resource/ID
   deletes the given entry


CLIENT
======
The client is entirely written in JavaScript, based on very simple HTML pages which are used as container.
There are:
- index.html ("Home")
- data.html ("Datenverwaltung")
- reporting.html ("Berichte")
which corresponds to the tab structure of the entire page.

Each of these files has a matching "code-behind" JS type whose naming is NameView for name.html.
This mapping is done in bootstrap.js, where the pages are initialized.

data.html.js:
-------------
The current implementation focuses on data manipulation. Therefore the DataView is the only page with real functionality.
The resources.json contains generic information about the existing tables (entities). The main menu of the DataView is
built accordingly; with respect to the grouping information, for each resource type, a menu item is provided.
The content of the DataView mainly consists of a big table displaying the entries of the selected resource type.

table.js / tabledatasource.js:
------------------------------
The TableDataSource provides CRUD functionality for a bound resource type (AJAX REST calls, see above).
 -> see onSuccess / onError events
The TableWrapper relies on its TableDataSource, visualizes the data and provides functionality to manipulate it.
 -> see datasource binding (above mentioned events)
 -> see row buttons / header buttons (tablebutton.js)
 -> see tablesorter (sorting, paging, filtering)

forms:
------
The popup forms are all handled the same, use the FormPrototype.
- EditForm : used to add/edit an entry according to the given resource. Includes validation. (editform.js)
- RelationsForm : relation editor (relationsform.js)
- Error/ConfirmationBox : simple views for errors and user confirmation ((error|confirm)box.js)

